#!/usr/bin/env node

const path = require('path')

const args = (process.env.BRITTLE || '').split(/\s|,/g).map(s => s.trim())

for (const arg of process.argv) {
  if (arg[0] === '-') args.push(arg)
}

const cov = flag('coverage', 'cov')
const bail = flag('bail')
const solo = flag('solo')
const runner = flag('runner') || flag('r')

process.title = 'brittle'

if (runner) {
  const fs = require('fs')

  const i = flag('runner') ? process.argv.indexOf('--runner') : process.argv.indexOf('-r')
  const out = path.resolve(process.argv[i + 1])
  const dir = path.dirname(out)

  process.argv.splice(i, 2) // remove it, easier for now

  let s = ''

  s += 'runTests()\n\nasync function runTests () {\n  const test = (await import(\'brittle\')).default\n\n'

  if (bail || solo) {
    s += '  test.configure({ bail: ' + !!bail + ', solo: ' + !!solo + ' })\n'
  }

  s += '  test.pause()\n\n'

  for (const arg of process.argv.slice(2)) {
    if (arg.startsWith('-')) continue

    const t = path.resolve(arg)
    if (t === out) continue

    let r = path.relative(dir, t)
    if (r[0] !== '.') r = '.' + path.sep + r
    s += '  await import(\'' + r + '\')\n'
  }

  s = s.trimRight()

  s += '\n\n  test.resume()\n}\n'
  s = '// This runner is auto-generated by Brittle\n\n' + s

  try {
    fs.mkdirSync(dir)
  } catch {}

  fs.writeFileSync(out, s)
  process.exit(0)
}

if (cov && process.env.BRITTLE_COVERAGE !== 'false') {
  const c8pkg = require('c8/package.json')
  const bin = c8pkg.bin ? path.join(path.dirname(require.resolve('c8/package.json')), c8pkg.bin) : null
  process.env.BRITTLE = (process.env.BRITTLE || '') + ' --no-coverage'
  process.argv.unshift(bin)
  process.argv.unshift(process.execPath)
  require(bin)
} else {
  start().catch(err => {
    console.error(err.stack)
    process.exit(1)
  })
}

async function start () {
  const brittle = require('./')

  if (bail || solo) {
    brittle.configure({ bail, solo })
  }

  brittle.pause()

  for (const arg of process.argv.slice(2)) {
    if (arg.startsWith('-')) continue
    await import('file://' + path.resolve(arg))
  }

  brittle.resume()
}

function flag (...names) {
  for (const name of names) {
    if (args.includes('-' + name)) return true
    if (args.includes('--no-' + name)) return false
    if (args.includes('--' + name)) return true
  }
  return undefined
}
